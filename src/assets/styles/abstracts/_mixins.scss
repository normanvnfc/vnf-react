// // -----------------------------------------------------------------------------
// // This file contains all application-wide Sass mixins.
// // -----------------------------------------------------------------------------

// /// Event wrapper
// /// @author Harry Roberts
// /// @param {Bool} $self [false] - Whether or not to include current selector
// /// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
// @use "sass:math";

// @mixin on-event($self: false) {
//   @if $self {
//     &,
//     &:hover,
//     &:active,
//     &:focus {
//       @content;
//     }
//   } @else {
//     &:hover,
//     &:active,
//     &:focus {
//       @content;
//     }
//   }
// }

// /// Make a context based selector a little more friendly
// /// @author Hugo Giraudel
// /// @param {String} $context
// @mixin when-inside($context) {
//   #{$context} & {
//     @content;
//   }
// }

// // usage @include font-size-em(12px)
// @mixin font-size-em($size) {
// 	font-size: $size;
// 	font-size: em($size);
// }
// @mixin font-size-rem($size) {
// 	font-size: $size;
// 	font-size: rem($size);
// }

// // usage @include gradient(#07c, #06f, vertical);
// @mixin gradient($start-color, $end-color, $orientation) {
// 	background: $start-color;
// 	@if $orientation == 'vertical' {
// 		background: -webkit-linear-gradient(top, $start-color, $end-color);
// 		background: linear-gradient(to bottom, $start-color, $end-color);
// 	} @else if $orientation == 'horizontal' {
// 		background: -webkit-linear-gradient(left, $start-color, $end-color);
// 		background: linear-gradient(to right, $start-color, $end-color);
// 	} @else {
// 		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
// 		background: radial-gradient(ellipse at center, $start-color, $end-color);
// 	}
// }

// // usage @include center-block;
// @mixin center-block {
// 	display: block;
// 	margin-left: auto;
// 	margin-right: auto;
// }
// // usage @include center-vertically;
// @mixin center-vertically {
// 	position: absolute;
// 	top: 50%;
// 	left: 50%;
// 	@include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
// }

// // usage @include responsive-ratio(16,9);
// @mixin responsive-ratio($x,$y, $pseudo: false) {
// 	$padding: unquote(  math.div($y, $x)  * 100 + '%' );
// 	@if $pseudo {
// 		&:before {
// 			@include pseudo($pos: relative);
// 			width: 100%;
// 			padding-top: $padding;
// 		}
// 	} @else {
// 		padding-top: $padding;
// 	}
// }

// // // usage @include css-triangle(#fff, left);
// // @mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
// // 	@include pseudo($pos: $position);
// // 	width: 0;
// // 	height: 0;
// // 	@if $round {
// // 		border-radius: 3px;
// // 	}
// // 	@if $direction == down {
// // 		border-left: $size solid transparent;
// // 		border-right: $size solid transparent;
// // 		border-top: $size solid $color;
// // 		margin-top: 0 - round( $size / 2.5 );
// // 	} @else if $direction == up {
// // 		border-left: $size solid transparent;
// // 		border-right: $size solid transparent;
// // 		border-bottom: $size solid $color;
// // 		margin-bottom: 0 - round( $size / 2.5 );
// // 	} @else if $direction == right {
// // 		border-top: $size solid transparent;
// // 		border-bottom: $size solid transparent;
// // 		border-left: $size solid $color;
// // 		margin-right: -$size;
// // 	} @else if  $direction == left {
// // 		border-top: $size solid transparent;
// // 		border-bottom: $size solid transparent;
// // 		border-right: $size solid $color;
// // 		margin-left: -$size;
// // 	}
// // }

// // usage:
// // input, textarea {  
// //	@include input-placeholder {
// //		color: $grey;
// //	}
// // }
// // @mixin input-placeholder {
// // 	&.placeholder { @content; }
// // 	&:-moz-placeholder { @content; }
// // 	&::-moz-placeholder { @content; }
// // 	&:-ms-input-placeholder { @content; }
// // 	&::-webkit-input-placeholder { @content; }
// // }

// // usage @include truncate(100%);
// @mixin truncate($truncation-boundary) {
// 	max-width: $truncation-boundary;
// 	white-space: nowrap;
// 	overflow: hidden;
// 	text-overflow: ellipsis;
// }
// // usage @include truncate-multi(100%, 3em);
// @mixin truncate-multi($truncation-boundary, $truncation-height) {
// 	max-width: $truncation-boundary;
// 	height: $truncation-height;
// 	display: -webkit-box;
// 	/* Fallback for non-webkit */
// 	-webkit-line-clamp: 3;
// 	-webkit-box-orient: vertical;
// 	overflow: hidden;
// 	text-overflow: ellipsis;
// }

// // // Grid system
// // //
// // // Generate semantic grid columns with these mixins.

// // // Centered container element
// // @mixin make-container($gutter: $grid-gutter-width)
// // {
// // 	margin-right: auto;
// // 	margin-left: auto;
// // 	padding-left:  ($gutter / 2);
// // 	padding-right: ($gutter / 2);
// // }

// // // Creates a wrapper for a series of columns
// // @mixin make-row($gutter: $grid-gutter-width)
// // {
// // 	margin-left:  ($gutter / -2);
// // 	margin-right: ($gutter / -2);
// // }

// // @mixin make-col($gutter: $grid-gutter-width)
// // {
// // 	position: relative;
// // 	float: left;
// // 	min-height: 1px;
// // 	padding-left:  ($gutter / 2);
// // 	padding-right: ($gutter / 2);
// // }

// // @mixin make-col-span($columns)
// // {
// // 	width: percentage(($columns / $grid-columns));
// // }
// // @mixin make-col-offset($columns)
// // {
// // 	margin-left: percentage(($columns / $grid-columns));
// // }
// // @mixin make-col-push($columns)
// // {
// // 	left: percentage(($columns / $grid-columns));
// // }
// // @mixin make-col-pull($columns)
// // {
// // 	right: percentage(($columns / $grid-columns));
// // }